apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-funcx-web-service
spec:
  replicas: {{ .Values.webService.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-funcx-web-service
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-funcx-web-service
    spec:
      initContainers:
      - name: check-postgresql
        image: "ncsa/checks:latest"
        env:
          - name: PG_URI
            value: 'postgresql://{{  .Values.postgresql.postgresqlUsername }}:{{ .Values.postgresql.postgresqlPassword }}@{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.postgresqlDatabase }}'
      - name: create-database
        image: {{ .Values.webService.dbSetupImage }}:{{ .Values.webService.dbSetupTag }}
        imagePullPolicy: {{ .Values.webService.dbSetupPullPolicy }}
        env:
          - name: PGPASSWORD
            value: "{{ .Values.postgresql.postgresqlPassword }}"
          - name: POSTGRES_HOST
            value: "{{ .Release.Name }}-postgresql"
      containers:
      - name: {{ .Release.Name }}-funcx-web-service
        image: {{ .Values.webService.image }}:{{ .Values.webService.tag }}
        env:
        - name: APP_CONFIG_FILE
          value: "/opt/funcx/app.conf"
        tty: true
        stdin: true
        imagePullPolicy: {{ .Values.webService.pullPolicy }}
        {{- if .Values.webService.resources }}
        resources:
{{ toYaml .Values.webService.resources | indent 10 }}
        {{- end }}

        volumeMounts:
          - name: app-cfg
            mountPath: /opt/funcx
          - name: sqlite
            mountPath: /sqlite
        ports:
          - containerPort: 5000

      volumes:
        - name: app-cfg
          configMap:
            name:  {{ .Release.Name }}-web-service-config
        - name: sqlite
          emptyDir: {}
